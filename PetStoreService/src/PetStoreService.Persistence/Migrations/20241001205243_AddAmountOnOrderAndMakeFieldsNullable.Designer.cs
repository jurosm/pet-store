// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PetStoreService.Persistence;

#nullable disable

namespace PetStoreService.Persistence.Migrations
{
    [DbContext(typeof(PetStoreDBContext))]
    [Migration("20241001205243_AddAmountOnOrderAndMakeFieldsNullable")]
    partial class AddAmountOnOrderAndMakeFieldsNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PetStoreService.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Category", "petstore");
                });

            modelBuilder.Entity("PetStoreService.Domain.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("DatePosted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ToyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ToyId")
                        .HasDatabaseName("fki_Comment_Toy");

                    b.ToTable("Comment", "petstore");
                });

            modelBuilder.Entity("PetStoreService.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("CustomerSurname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("ExternalReferenceId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("IpinfoAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("IPInfoAddress");

                    b.Property<DateTime>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Order", "petstore");
                });

            modelBuilder.Entity("PetStoreService.Domain.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int?>("ToyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("fki_OrderItem_Order");

                    b.HasIndex("ToyId")
                        .HasDatabaseName("fki_OrderItem_Toy");

                    b.ToTable("OrderItem", "petstore");
                });

            modelBuilder.Entity("PetStoreService.Domain.Entities.Toy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("fki_OrderItem_Category");

                    b.ToTable("Toy", "petstore");
                });

            modelBuilder.Entity("PetStoreService.Domain.Entities.Comment", b =>
                {
                    b.HasOne("PetStoreService.Domain.Entities.Toy", "Toy")
                        .WithMany("Comment")
                        .HasForeignKey("ToyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("Comment_Toy");

                    b.Navigation("Toy");
                });

            modelBuilder.Entity("PetStoreService.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("PetStoreService.Domain.Entities.Order", "Order")
                        .WithMany("OrderItem")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("OrderItem_Order");

                    b.HasOne("PetStoreService.Domain.Entities.Toy", "Toy")
                        .WithMany("OrderItem")
                        .HasForeignKey("ToyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("OrderItem_Toy");

                    b.Navigation("Order");

                    b.Navigation("Toy");
                });

            modelBuilder.Entity("PetStoreService.Domain.Entities.Toy", b =>
                {
                    b.HasOne("PetStoreService.Domain.Entities.Category", "Category")
                        .WithMany("Toy")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("Toy_Category");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PetStoreService.Domain.Entities.Category", b =>
                {
                    b.Navigation("Toy");
                });

            modelBuilder.Entity("PetStoreService.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("PetStoreService.Domain.Entities.Toy", b =>
                {
                    b.Navigation("Comment");

                    b.Navigation("OrderItem");
                });
#pragma warning restore 612, 618
        }
    }
}
